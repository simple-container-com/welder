schemaVersion: "1.8.1"
projectName: welder
projectRoot: .
version: 2.1.${env:BITBUCKET_BUILD_NUMBER:0}-${git:commit.short}${arg:release-suffix:}
default:
  build:
    volumes:
      - ".gitconfig:${container:home}/.gitconfig:ro"
      - "~/.ssh:${container:home}/.ssh:ro"
      - "${task:gomodcache.trim}:${container:home}/go/pkg/mod"
    args:
      namespace: dev
      build-goals: build:build
      build-via-welder: "false"
      build-image: golang:1.21
    env:
      VERSION: ${project:version}
      BUILD_GOALS: ${arg:build-goals}
      BUILD_VIA_WELDER: ${arg:build-via-welder}
      INSIDE_WELDER: "true"
  deploy:
    env:
      PROFILE: simple-container
    environments:
      dev:
        autoDeploy: true
      sox: { }
profiles:
  single-test:
    build:
      args:
        build-goals: build:build
      env:
        PLATFORMS: "linux-amd64"
        TEST_TARGET: "./pkg/welder/... -run TestTaskOutputCapture -run TestBuildWithCustomImage"
  skip-tests:
    activation:
      skip-tests: true
    build:
      env:
        SKIP_TESTS: "true"
  alpha: # profile for publishing to alpha channel from CI
    build: &alpha-build
      args:
        release-suffix: "-alpha"
        build-goals: build:all
      env: &alpha-env
        RELEASE_CHANNEL: alpha
  local: # profile to activate locally and for publishing to alpha channel
    activation:
      if: "!${mode:ci}"
    build:
      <<: *alpha-build
      env:
        <<: *alpha-env
  macosx:
    activation:
      if: ${os:type.darwin} && ${mode:on-host}
    build:
      env:
        GOMODCACHE: ${user:home}/go/pkg/mod
modules:
  - name: welder
    build:
      steps:
        - task: tools
        - task: build
        - task: build-docs
    dockerImages:
      - name: build-docs
        dockerFile: ${project:root}/Dockerfile
        tags:
          - docker.simple-container.com/${arg:namespace}/welder/welder-docs:latest
          - docker.simple-container.com/${arg:namespace}/welder/welder-docs:${project:version}
        build:
          contextPath: ${project:root}
          args:
            - name: version
              value: ${project:version}
        runAfterPush:
          tasks:
            - deploy-release
            - tag-release
tasks:
  tools:
    customImage: &build-image
      # the following is because build image requires docker CLI to be present
      # this is used in some tests (e.g. the ones that use mutagen)
      inlineDockerFile: |-
        FROM ${arg:build-image}
        ENV DOCKERVERSION=24.0.7
        RUN curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKERVERSION}.tgz \
          && tar xzvf docker-${DOCKERVERSION}.tgz --strip 1 \
                         -C /usr/local/bin docker/docker \
          && rm docker-${DOCKERVERSION}.tgz
    description: Installs required tools
    script:
      - export GOMODCACHE=${container:home}/go/pkg/mod
      - cat tools.go | grep _ | awk -F'"' '{print $2}' | xargs -tI % go get %
      - go mod download
      - go mod tidy
  build:
    customImage: *build-image
    description: Compiles code and builds bundles
    script:
      - export GOMODCACHE=${container:home}/go/pkg/mod
      - go run build.go ${BUILD_GOALS}
  gomodcache:
    runOn: host
    description: Returns directory of go mod cache
    script:
      - |-
        GOCACHEDIR="$( go env 2>/dev/null | grep GOMODCACHE | awk -F '=' '{print $2}' | sed "s/['\"]//g" )"
        if [ -z "$GOCACHEDIR" ]; then echo "/tmp/welder-modcache"; else echo "$GOCACHEDIR" ; fi
  build-docs:
    image: python:3.9.18
    workDir: ${project:root}/docs
    script:
      - pip install -r requirements.txt
      - PATH=${PATH}:~/.local/bin mkdocs build
  deploy-release:
    image: dtzar/helm-kubectl:3.13
    script:
      - |-
        export VALUES="--set image.image=${docker:tags[0].image} --set image.tag=${docker:tags[0].tag}"
        export PROFILE=simple-container
        ${project:root}/charts/welder/deploy.sh welder welder
  tag-release:
    runOn: host
    description: Tags release in git
    script:
      - |-
        git tag -f ${project:version}
        git push origin -f ${project:version}