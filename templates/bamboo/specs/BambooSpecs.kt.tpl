// Code generated by "welder bamboo-specs"
package {{.PackageName}}

import com.atlassian.bamboo.specs.api.BambooSpec
import com.atlassian.platform.atlasbuild.AtlasBuildModule
import com.atlassian.platform.atlasbuild.AtlasBuildSpecs
import com.atlassian.platform.atlasbuild.ConfiguredBambooServer
import com.atlassian.platform.atlasbuild.Location

@BambooSpec
object BambooSpecs {

    @JvmStatic
    fun main(args: Array<String>) {

        AtlasBuildSpecs(
                owner = "{{.Owner}}",
                projectKey = "{{.ProjectKey}}",
                buildPbcImage = "{{.BuildPbcImage}}",
                deployPbcImage = "{{.DeployPbcImage}}",
                linkedRepoName = "{{.LinkedRepoName}}",
                slackChannel = "{{.SlackChannel}}",
                locations = mapOf(
{{$mn := len $.Locations}}{{range $i, $moduleLocation := $.Locations}}
                        "{{$moduleLocation.ModuleName}}" to listOf(
{{$ln := len $moduleLocation.Locations}}{{range $j, $location := $moduleLocation.Locations}}
                                Location(
                                        name = "{{$location.Name}}",
                                        autoDeployed = {{$location.AutoDeployed}}
                                ){{ if lt (plus1 $j) $ln }},{{ end }}
{{end}}
                        ){{ if lt (plus1 $i) $mn }},{{ end }}
{{end}}
                ),
                modules = listOf(
{{$mn := len $.Modules}}{{range $i, $module := $.Modules}}
                        AtlasBuildModule(
                                name = "{{ $module.Name }}",
                                doDocker = {{ $module.DoDocker }},
                                doDeploy = {{ $module.DoDeploy }},
                                doMicrosDeploy = {{ $module.DoMicrosDeploy }},
                                artifacts = listOf(AtlasBuildSpecs.WELDER_OUT)
                        ){{ if lt (plus1 $i) $mn }},{{ end }}
{{end}}
                ),
                customBambooServerConfig = { null }
        ).generateBambooSpecs()
    }
}
